#include <vector>
#include "TROOT.h"
#include "TH1.h"
#include "TMath.h"

/*
$ root h1.root
root [0] .x convolution.C+
root [1] convolution()
root [2] h1->Draw()
root [3] convoluted->Draw()
 */

void convolutionWithGaussian(std::vector<double>& xin, std::vector<double>& fin, std::vector<double>& fout, double sigma) {
  double dx = xin[1]-xin[0];
  fout.resize(xin.size());
  for (unsigned int i=0; i < xin.size(); i++) {
    fout[i]=0;
    for (unsigned int j=0; j < xin.size(); j++) {
      fout[i] = fout[i] + 0.5*fin[j]
	*(TMath::Erf((xin[i]-(xin[j]-0.5*dx))/(sqrt(2.)*sigma))
	  -TMath::Erf((xin[i]-(xin[j]+0.5*dx))/(sqrt(2.)*sigma)));
    }
  }
  return;
}

void convolution() {
  double sigma=10.; // sigma of Gaussian
  TH1D* hin = (TH1D*)gROOT->FindObject("h1"); // given function
  TH1D* hout = (TH1D*)hin->Clone("convoluted"); // convoluted function with Gaussian

  std::vector<double> xin, fin, fout;
  for (int i=0; i<hin->GetNbinsX(); i++) {
    xin.push_back(hin->GetBinCenter(i));
    fin.push_back(hin->GetBinContent(i));
  }
  convolutionWithGaussian(xin,fin,fout,sigma);
  hout->SetContent(&(fout[0]));
  return;
}
